name: Prepare for fixing code
description: Prepare for fixing code
inputs:
  app_id:
    description: |
      GitHub App ID
    required: true
  app_private_key:
    description: |
      GitHub App Private Key
    required: true
  workflow_name:
    description: |
      Client Workflow name. If this is empty, the action does not check the workflow name.
    required: false
    default: securefix
  allow_workflow_fix:
    description: |
      Either true or false. If true, the action allows the workflow to fix the code.
    required: false
    default: "false"
  config:
    description: |
      YAML config to push other repositories and branches.
    required: false
outputs:
  pull_request:
    description: |
      Pull Request
    value: ${{ steps.pr.outputs.value }}
  pull_request_number:
    description: |
      Pull Request number
    value: ${{ steps.metadata.outputs.value && (fromJson(steps.metadata.outputs.value).context.payload.pull_request && fromJson(steps.metadata.outputs.value).context.payload.pull_request.number || '') || '' }}
  workflow_run:
    description: |
      Workflow Run
    value: ${{ steps.workflow_run.outputs.value }}
  client_repository:
    description: |
      Repository Full Name
    value: ${{steps.info.outputs.repo_full_name}}
  push_repository:
    description: |
      Repository Full Name
    value: ${{steps.js.outputs.repository}}
  branch:
    description: |
      Branch
    value: ${{steps.js.outputs.branch}}
  create_pull_request:
    description: |
      Created pull request parameter
    value: ${{ steps.js.outputs.pull_request }}
  workflow_run_id:
    description: |
      Workflow Run ID
    value: ${{ steps.info.outputs.run_id }}
  metadata:
    description: |
      Metadata
    value: ${{ steps.metadata.outputs.value }}
  fixed_files:
    description: |
      Fixed file paths
    value: ${{ steps.files.outputs.value }}
  github_token:
    description: |
      GitHub App token
    value: ${{ steps.token.outputs.token }}
  github_token_for_push:
    description: |
      GitHub App token to push a commit to the other repository
    value: ${{ steps.token2.outputs.token }}
runs:
  using: composite
  steps:
    - id: info
      shell: bash
      env:
        LABEL_NAME: ${{ github.event.label.name }}
        # $GITHUB_REPOSITORY/${GITHUB_RUN_ID}
        LABEL_DESCRIPTION: ${{ github.event.label.description }}
      run: |
        repo_full_name=${LABEL_DESCRIPTION%/*}
        {
          echo "repo_full_name=${repo_full_name}"
          echo "repo=${repo_full_name#*/}"
          echo "run_id=${LABEL_DESCRIPTION##*/}"
        } >> "$GITHUB_OUTPUT"

    - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: permissions
      env:
        ALLOW_WORKFLOW_FIX: ${{inputs.allow_workflow_fix}}
      with:
        script: |
          let permissions = {
            actions: "read",
            contents: "write",
            pull_requests: "write",
          };
          if (process.env.ALLOW_WORKFLOW_FIX === 'true') {
            permissions.workflows = "write";
          }
          return permissions;

    # Create a GitHub App token
    - uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      id: token
      with:
        app_id: ${{inputs.app_id}}
        private_key: ${{inputs.app_private_key}}
        repositories: >-
          ["${{ steps.info.outputs.repo }}"]
        permissions: ${{ steps.permissions.outputs.result }}

    # Download a GitHub Actions Artifact
    - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        github-token: ${{ steps.token.outputs.token }}
        name: ${{ github.event.label.name }}
        repository: ${{ steps.info.outputs.repo_full_name }}
        run-id: ${{ steps.info.outputs.run_id }}

    # Read a metadata file
    - id: metadata
      shell: bash
      env:
        METADATA_FILE: ${{ github.event.label.name}}.json
      run: |
        {
          echo 'value<<EOF'
          cat "$METADATA_FILE"
          echo EOF
        } >> "$GITHUB_OUTPUT"

    # Get a pull request
    - if: fromJson(steps.metadata.outputs.value).context.payload.pull_request
      id: pr
      shell: bash
      env:
        NUMBER: ${{ fromJson(steps.metadata.outputs.value).context.payload.pull_request.number }}
        GH_TOKEN: ${{ steps.token.outputs.token }}
        REPO: ${{ steps.info.outputs.repo_full_name }}
      run: |
        data=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/pulls/$NUMBER")
        {
          echo 'value<<EOF'
          echo "$data"
          echo EOF
        } >> "$GITHUB_OUTPUT"

    # Get GitHub Actions Workflow Run
    - id: workflow_run
      shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        REPO: ${{ steps.info.outputs.repo_full_name }}
        RUN_ID: ${{ steps.info.outputs.run_id }}
        WORKFLOW: ${{ inputs.workflow_name }}
      run: |
        data=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/actions/runs/$RUN_ID")
        {
          echo 'value<<EOF'
          echo "$data"
          echo EOF
        } >> "$GITHUB_OUTPUT"

    # Validate workflow name
    - if: inputs.workflow_name != '' && fromJson(steps.workflow_run.outputs.value).name != inputs.workflow_name
      shell: bash
      env:
        WORKFLOW: ${{ inputs.workflow_name }}
      run: |
        echo "::error:: The client workflow name must be $WORKFLOW"
        exit 1

    # Get a branch
    - if: |
        !fromJson(steps.metadata.outputs.value).context.payload.pull_request
      id: branch
      shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        REPO: ${{ steps.info.outputs.repo_full_name }}
        BRANCH: ${{ fromJson(steps.workflow_run.outputs.value).head_branch }}
      run: |
        data=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/branches/$BRANCH")
        {
          echo 'value<<EOF'
          echo "$data"
          echo EOF
        } >> "$GITHUB_OUTPUT"

    # Validate if the workflow commit sha is latest
    - shell: bash
      if: fromJson(steps.workflow_run.outputs.value).head_sha != (fromJson(steps.metadata.outputs.value).context.payload.pull_request && fromJson(steps.pr.outputs.value).head.sha || fromJson(steps.branch.outputs.value).commit.sha)
      env:
        EXPECTED: ${{ fromJson(steps.workflow_run.outputs.value).head_sha }}
        ACTUAL: ${{ fromJson(steps.metadata.outputs.value).context.payload.pull_request && fromJson(steps.pr.outputs.value).head.sha || fromJson(steps.branch.outputs.value).commit.sha }}
      run: |
        echo "::error:: The workflow commit sha ($ACTUAL) is not the latest ($EXPECTED)"
        exit 1

    # Read changed file paths
    - id: files
      shell: bash
      env:
        FILES: ${{ github.event.label.name}}_files.txt
      run: |
        {
          echo 'value<<EOF'
          cat "$FILES"
          echo EOF
        } >> "$GITHUB_OUTPUT"
        rm "$FILES"

    # Read YAML config to push other repositories and branches
    # Read metadata to get repository and branch
    # Validate repository and branch
    - uses: csm-actions/securefix-action/js@main
      id: js
      with:
        repository: ${{steps.info.outputs.repo_full_name}}
        branch: ${{fromJson(steps.workflow_run.outputs.value).head_branch}}
        metadata: ${{github.event.label.name}}.json
        config: ${{inputs.config}}

    - if: steps.js.outputs.repository != steps.info.outputs.repo_full_name || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.labels) != '' || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.team_reviewers) != ''
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: push_permissions
      env:
        ALLOW_WORKFLOW_FIX: ${{inputs.allow_workflow_fix}}
        PR_TITLE: ${{fromJSON(steps.js.outputs.pull_request).title}}
        PR_LABELS: ${{toJSON(fromJSON(steps.metadata.outputs.value).inputs.pull_request.labels)}}
        PR_TEAM: ${{toJSON(fromJSON(steps.metadata.outputs.value).inputs.pull_request.team_reviewers)}}
      with:
        script: |
          let permissions = {
            contents: "write",
          };
          const labels = JSON.parse(process.env.PR_LABELS);
          const teamReviewers = JSON.parse(process.env.PR_TEAM);
          if (process.env.ALLOW_WORKFLOW_FIX === 'true') {
            permissions.workflows = "write";
          }
          if (process.env.PR_TITLE) {
            permissions.pull_requests = "write";
          }
          if (labels.length > 0) {
            permissions.issues = "write";
          }
          if (teamReviewers.length > 0) {
            permissions.members = "read";
          }
          return permissions;

    - if: steps.js.outputs.repository != steps.info.outputs.repo_full_name || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.labels) != '' || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.team_reviewers) != ''
      uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      id: push_token
      with:
        app_id: ${{inputs.app_id}}
        private_key: ${{inputs.app_private_key}}
        repositories: >-
          ["${{ steps.js.outputs.repository_name }}"]
        permissions: ${{ steps.push_permissions.outputs.result }}

    - id: token2
      shell: bash
      env:
        IS_PUSH_TOKEN: ${{steps.js.outputs.repository != steps.info.outputs.repo_full_name || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.labels) != '' || join(fromJSON(steps.metadata.outputs.value).inputs.pull_request.team_reviewers) != ''}}
        TOKEN: ${{ steps.token.outputs.token }}
        PUSH_TOKEN: ${{ steps.push_token.outputs.token }}
      run: |
        if [ "$IS_PUSH_TOKEN" = "true" ]; then
          echo "token=${PUSH_TOKEN}" >> "$GITHUB_OUTPUT"
        else
          echo "token=${TOKEN}" >> "$GITHUB_OUTPUT"
        fi
