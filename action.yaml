name: Fix Code securely
description: Fix Code securely
author: Shunsuke Suzuki
branding:
  icon: git-commit
  color: green
inputs:
  app_id:
    description: |
      GitHub App ID
    required: true
  app_private_key:
    description: |
      GitHub App Private Key
    required: true
  server_repository:
    description: |
      Server repository name
    required: false
    default: securefix
  commit_message:
    description: |
      Commit message
    required: false
  files:
    description: |
      Fixed files
    required: false
  fail_if_changes:
    description: |
      If true, the action fails if there are changes.
    required: false
  repository:
    description: |
      A repository full name where a commit will be pushed.
    required: false
  branch:
    description: |
      A branch where a commit will be pushed.
    required: false
  pull_request_title:
    description: |
      A pull request title.
      To create a pull request, this is required.
    required: false
  pull_request_base_branch:
    description: |
      A pull request base branch.
      To create a pull request, this is required.
    required: false
  pull_request_body:
    description: |
      A pull request body.
    required: false
  pull_request_labels:
    description: |
      Pull request labels.
      This requires the `issues:write` permission.
    required: false
  pull_request_draft:
    description: |
      Create a pull request as draft.
    required: false
  pull_request_reviewers:
    description: |
      Pull request reviewers.
    required: false
  pull_request_team_reviewers:
    description: |
      Pull request team reviewers.
      This requires the `members:read` permission.
    required: false
  pull_request_assignees:
    description: |
      Pull request assignees.
    required: false
  pull_request_comment:
    description: |
      Pull request comment.
      If this is set, a pull request comment is posted after a pull request is created.
    required: false
runs:
  using: composite
  steps:
    - uses: csm-actions/securefix-action/js@ec14357bb53194f06fa019bbf6ee4667e3cbd212
      id: client1
      with:
        action: client1
        files: ${{inputs.files}}

    # Create a GitHub App token to create and delete a label
    - uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      if: steps.client1.outputs.changed_files != ''
      id: token
      with:
        app_id: ${{inputs.app_id}}
        private_key: ${{inputs.app_private_key}}
        repositories: >-
          ["${{inputs.server_repository}}"]
        permissions: >-
          {
            "issues": "write"
          }

    # Create metadata
    - if: steps.client1.outputs.changed_files != ''
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: metadata
      env:
        COMMIT_MESSAGE: ${{inputs.commit_message}}
        REPO: ${{inputs.repository}}
        BRANCH: ${{inputs.branch}}
        PR_TITLE: ${{inputs.pull_request_title}}
        PR_BASE_BRANCH: ${{inputs.pull_request_base_branch}}
        PR_BODY: ${{inputs.pull_request_body}}
        PR_LABELS: ${{inputs.pull_request_labels}}
        PR_ASSIGNEES: ${{inputs.pull_request_assignees}}
        PR_REVIEWERS: ${{inputs.pull_request_reviewers}}
        PR_TEAM_REVIEWERS: ${{inputs.pull_request_team_reviewers}}
        PR_DRAFT: ${{inputs.pull_request_draft}}
        PR_COMMENT: ${{inputs.pull_request_comment}}
      with:
        script: |
          if (process.env.PR_TITLE) {
            if (!process.env.PR_BASE_BRANCH) {
              throw new Error('pull_request_base_branch is required to create a pull request');
            }
          } else if (process.env.PR_BASE_BRANCH || process.env.PR_BODY || process.env.PR_LABELS || process.env.PR_ASSIGNEES || process.env.PR_REVIEWERS || process.env.PR_TEAM_REVIEWERS || process.env.PR_DRAFT || process.env.PR_COMMENT) {
            throw new Error('pull_request_title is required to create a pull request');
          }
          return {
            context: context,
            inputs: {
              repository: process.env.REPO || '',
              branch: process.env.BRANCH || '',
              commit_message: process.env.COMMIT_MESSAGE || '',
              pull_request: {
                title: process.env.PR_TITLE || '',
                body: process.env.PR_BODY || '',
                base: process.env.PR_BASE_BRANCH || '',
                labels: process.env.PR_LABELS ? process.env.PR_LABELS.trim().split('\n') : [],
                assignees: process.env.PR_ASSIGNEES ? process.env.PR_ASSIGNEES.trim().split('\n') : [],
                reviewers: process.env.PR_REVIEWERS ? process.env.PR_REVIEWERS.trim().split('\n') : [],
                team_reviewers: process.env.PR_TEAM_REVIEWERS ? process.env.PR_TEAM_REVIEWERS.trim().split('\n') : [],
                draft: process.env.PR_DRAFT === 'true',
                comment: process.env.PR_COMMENT || '',
              }
            },
          };

    # Create a metadata file
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      run: echo "$EVENT" > "${ARTIFACT_NAME}.json"
      env:
        ARTIFACT_NAME: ${{ steps.client1.outputs.artifact_name }}
        EVENT: ${{steps.metadata.outputs.result}}

    # Create a file where fixed file paths are listed
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      run: echo "$FILES" > "${ARTIFACT_NAME}_files.txt"
      env:
        ARTIFACT_NAME: ${{ steps.client1.outputs.artifact_name }}
        FILES: ${{ steps.client1.outputs.changed_files }}
    # Upload files to GitHub Actions Artifact
    - if: steps.client1.outputs.changed_files != ''
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{steps.client1.outputs.artifact_name}}
        include-hidden-files: true
        path: |
          ${{ steps.client1.outputs.changed_files }}
          ${{steps.client1.outputs.artifact_name}}.json
          ${{steps.client1.outputs.artifact_name}}_files.txt
    # Delete metadata files
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      run: rm "${ARTIFACT_NAME}.json" "${ARTIFACT_NAME}_files.txt"
      env:
        ARTIFACT_NAME: ${{ steps.client1.outputs.artifact_name }}
    # Create a label
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        ARTIFACT_NAME: ${{ steps.client1.outputs.artifact_name }}
        REPO: ${{inputs.server_repository}}
      run: |
        gh label create \
          -R "${GITHUB_REPOSITORY_OWNER}/${REPO}" \
          "$ARTIFACT_NAME" \
          --description "$GITHUB_REPOSITORY/${GITHUB_RUN_ID}"
    # Sleep for a while
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      run: sleep 1
    # Delete a label
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        ARTIFACT_NAME: ${{ steps.client1.outputs.artifact_name }}
        REPO: ${{inputs.server_repository}}
      run: |
        gh label delete \
          -R "${GITHUB_REPOSITORY_OWNER}/${REPO}" \
          --yes \
          "$ARTIFACT_NAME"
    # Fail if changes are detected
    - if: steps.client1.outputs.changed_files != ''
      shell: bash
      env:
        FILES: ${{ steps.client1.outputs.changed_files }}
        FAILED: ${{inputs.fail_if_changes != '' && inputs.fail_if_changes || (inputs.repository == '' && inputs.branch == '')}}
      run: |
        if [ "$FAILED" = true ]; then
          echo "::error:: Changes detected. A commit will be pushed"
          echo "$FILES"
          exit 1
        fi
        echo "::notice:: Changes detected. A commit will be pushed"
        echo "$FILES"
